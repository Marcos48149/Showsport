generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Payment Logs - for detailed logging of all payment events
model PaymentLog {
  id          Int      @id @default(autoincrement())
  timestamp   DateTime @default(now())
  level       String   // ERROR, WARN, INFO, DEBUG
  event       String   // payment_initiated, payment_approved, webhook_received, etc.
  gateway     String   // mercadopago, gocuotas, modo
  orderId     String?  @map("order_id")
  paymentId   String?  @map("payment_id")
  customerId  String?  @map("customer_id")
  amount      Decimal? @db.Decimal(10, 2)
  currency    String   @default("ARS")
  status      String?
  metadata    Json?    // Additional data as JSON
  errorMessage String? @map("error_message")
  requestId   String?  @map("request_id")
  userAgent   String?  @map("user_agent")
  ipAddress   String?  @map("ip_address")
  createdAt   DateTime @default(now()) @map("created_at")

  // Optional relation to transaction
  transactionId Int? @map("transaction_id")
  transaction   PaymentTransaction? @relation("TransactionLogs", fields: [transactionId], references: [id])

  @@index([gateway, timestamp])
  @@index([orderId])
  @@index([level, timestamp])
  @@index([event, gateway])
  @@index([transactionId])
  @@map("payment_logs")
}

// Payment Transactions - main transaction records
model PaymentTransaction {
  id              Int      @id @default(autoincrement())
  orderId         String   @unique @map("order_id")
  paymentId       String?  @map("payment_id")
  gateway         String   // mercadopago, gocuotas, modo
  customerId      String   @map("customer_id")
  customerEmail   String   @map("customer_email")
  amount          Decimal  @db.Decimal(10, 2)
  currency        String   @default("ARS")
  status          String   @default("pending") // pending, approved, rejected, cancelled, refunded
  items           Json     // Array of purchased items
  shippingAddress Json?    @map("shipping_address")
  metadata        Json?    // Additional transaction data
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")
  processedAt     DateTime? @map("processed_at")
  failureReason   String?  @map("failure_reason")

  // Relations
  logs PaymentLog[] @relation("TransactionLogs")

  @@index([gateway, status])
  @@index([createdAt])
  @@index([status, processedAt])
  @@index([customerEmail])
  @@map("payment_transactions")
}

// Analytics aggregated data (for performance)
model PaymentAnalytics {
  id                  Int      @id @default(autoincrement())
  date                DateTime @db.Date
  gateway             String
  totalTransactions   Int      @default(0) @map("total_transactions")
  successfulTransactions Int   @default(0) @map("successful_transactions")
  totalRevenue        Decimal  @default(0) @db.Decimal(12, 2) @map("total_revenue")
  averageOrderValue   Decimal  @default(0) @db.Decimal(10, 2) @map("average_order_value")
  errorCount          Int      @default(0) @map("error_count")
  createdAt           DateTime @default(now()) @map("created_at")
  updatedAt           DateTime @updatedAt @map("updated_at")

  @@unique([date, gateway])
  @@index([date])
  @@index([gateway, date])
  @@map("payment_analytics")
}

// Webhook delivery tracking
model WebhookDelivery {
  id           Int      @id @default(autoincrement())
  gateway      String
  event        String
  paymentId    String?  @map("payment_id")
  orderId      String?  @map("order_id")
  status       String   // pending, delivered, failed, retrying
  attempts     Int      @default(0)
  lastAttempt  DateTime? @map("last_attempt")
  response     Json?    // Response data from webhook
  errorMessage String?  @map("error_message")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  @@index([gateway, status])
  @@index([orderId])
  @@index([createdAt])
  @@map("webhook_deliveries")
}

// System configuration
model PaymentConfig {
  id          Int      @id @default(autoincrement())
  gateway     String   @unique
  isEnabled   Boolean  @default(true) @map("is_enabled")
  testMode    Boolean  @default(true) @map("test_mode")
  config      Json     // Gateway-specific configuration
  lastTested  DateTime? @map("last_tested")
  testResult  String?  @map("test_result") // passed, failed
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@map("payment_configs")
}

// Return and Exchange System
model ReturnRequest {
  id              Int      @id @default(autoincrement())
  requestId       String   @unique @map("request_id") // RET-XXXXXX
  orderNumber     String   @map("order_number")
  customerEmail   String   @map("customer_email")
  customerName    String   @map("customer_name")
  type            String   // change, return
  resolution      String   // coupon, refund
  status          String   @default("pending") // pending, approved, shipped, received, completed, rejected
  reason          String
  notes           String?
  couponCode      String?  @map("coupon_code")
  couponAmount    Decimal? @db.Decimal(10, 2) @map("coupon_amount")
  refundAmount    Decimal? @db.Decimal(10, 2) @map("refund_amount")
  shippingLabel   String?  @map("shipping_label")
  trackingNumber  String?  @map("tracking_number")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")
  processedAt     DateTime? @map("processed_at")

  // Relations
  items         ReturnItem[]
  notifications ReturnNotification[]
  coupon        Coupon?

  @@index([orderNumber])
  @@index([customerEmail])
  @@index([status])
  @@index([createdAt])
  @@map("return_requests")
}

model ReturnItem {
  id          Int      @id @default(autoincrement())
  returnId    Int      @map("return_id")
  productId   String   @map("product_id")
  productName String   @map("product_name")
  productImage String? @map("product_image")
  size        String
  quantity    Int
  price       Decimal  @db.Decimal(10, 2)
  reason      String

  // Relations
  returnRequest ReturnRequest @relation(fields: [returnId], references: [id], onDelete: Cascade)

  @@index([returnId])
  @@map("return_items")
}

model ReturnNotification {
  id        Int      @id @default(autoincrement())
  returnId  Int      @map("return_id")
  type      String   // email, sms, whatsapp
  status    String   // sent, pending, failed
  content   String
  sentAt    DateTime? @map("sent_at")
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  returnRequest ReturnRequest @relation(fields: [returnId], references: [id], onDelete: Cascade)

  @@index([returnId])
  @@index([status])
  @@map("return_notifications")
}

model Coupon {
  id           Int      @id @default(autoincrement())
  code         String   @unique
  returnId     Int?     @unique @map("return_id")
  amount       Decimal  @db.Decimal(10, 2)
  customerEmail String  @map("customer_email")
  status       String   @default("active") // active, used, expired, cancelled
  usageCount   Int      @default(0) @map("usage_count")
  maxUsage     Int      @default(1) @map("max_usage")
  expiryDate   DateTime @map("expiry_date")
  createdAt    DateTime @default(now()) @map("created_at")
  usedAt       DateTime? @map("used_at")
  orderUsedIn  String?  @map("order_used_in")

  // Relations
  returnRequest ReturnRequest? @relation(fields: [returnId], references: [id])

  @@index([code])
  @@index([customerEmail])
  @@index([status])
  @@index([expiryDate])
  @@map("coupons")
}
